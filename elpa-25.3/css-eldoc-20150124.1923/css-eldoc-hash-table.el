(setq css-eldoc-hash-table #s(hash-table size 325 test equal rehash-size 1.5 rehash-threshold 0.8 data ("align-content" "Formal syntax: flex-start | flex-end | center | space-between | space-around | stretch" "align-items" "Formal syntax: flex-start | flex-end | center | baseline | stretch" "align-self" "Formal syntax: auto | flex-start | flex-end | center | baseline | stretch" "all" "Formal syntax: initial | inherit | unset" "<angle>" "" "grad" "" "turn" "" "deg" "" "rad" "" "animation" "Formal syntax: <single-animation-name> || <time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode>" "animation-delay" "Formal syntax: <time>#" "animation-direction" "Formal syntax:  <single-animation-direction>#" "animation-duration" "Formal syntax: <time>#" "animation-fill-mode" "Formal syntax: <single-animation-fill-mode>#" "animation-iteration-count" "Formal syntax: <single-animation-iteration-count>#" "animation-name" "Formal syntax: <single-animation-name>#" "animation-play-state" "Formal syntax: <single-animation-play-state>#" "animation-timing-function" "Formal syntax:  <timing-function>#" "auto" "" "attr()" "Formal syntax: attr( attribute-name <type-or-unit>? [, <fallback> ]? )" "backface-visibility" "Formal syntax:  visible | hidden " "background" "Formal syntax: [ <bg-layer> , ]* <final-bg-layer>
               where <bg-layer> = <bg-image> || <position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box>{1,2} 
                                       ^            ^              ^                 ^                ^              ^
                              <'background-image'>  |     <'background-size>         |    <'background-attachment'>  |
                                           <'background-position'>         <'background-repeat'>            <'background-origin'>
                                                                                                            & <'background-clip'>
               and <final-bg-layer> = <bg-layer> || <'background-color'>" "background-attachment" "Formal syntax:   <attachment>#" "background-origin" "Formal syntax: <box>#" "background-clip" "Formal syntax: <box>#" "background-color" "Formal syntax: <color>" "background-image" "Formal syntax: <bg-image>#" "background-position" "Formal syntax:  <position>#" "background-repeat" "Formal syntax: <repeat-style>#" "border" "Formal syntax:  <br-width> || <br-style> || <color>" "border-bottom" "Formal syntax: <br-width> || <br-style> || <color>" "background-size" "Formal syntax: <bg-size>#" "saturate()" "With a function, use the following:" "sepia()" "With a function, use the following:" "contrast()" "With a function, use the following:" "blur()" "With a function, use the following:" "hue-rotate()" "With a function, use the following:" "grayscale()" "With a function, use the following:" "invert()" "With a function, use the following:" "opacity()" "With a function, use the following:" "drop-shadow()" "With a function, use the following:" "filter" "With a function, use the following:" "brightness()" "With a function, use the following:" "border-bottom-width" "Formal syntax: <br-width>" "border-bottom-color" "Formal syntax: <color>" "border-bottom-left-radius" "Formal syntax: [ <length> | <percentage> ]{1,2} " "border-bottom-right-radius" "Formal syntax: [ <length> | <percentage> ]{1,2} " "border-bottom-style" "Formal syntax: <br-style>" "border-collapse" "Formal syntax: collapse | separate" "border-image-outset" "Formal syntax: [ <length> | <number> ]{1,4}" "border-color" "Formal syntax: <color>{1,4}" "border-image" "Formal syntax: <'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>" "border-image-repeat" "Formal syntax: [ stretch | repeat | round ]{1,2}  " "border-image-slice" "Formal syntax: [<number> | <percentage>]{1,4} && fill?  " "border-image-source" "Formal syntax: none | <image> " "border-left-color" "Formal syntax: <color>" "border-left" "Formal syntax: <br-width> || <br-style> || <color>" "border-image-width" "Formal syntax: [ <length> | <percentage> | <number> | auto ]{1,4} " "border-left-width" "Formal syntax: <br-width>" "border-left-style" "Formal syntax: <br-style>" "border-radius" "Formal syntax: [ <length> | <percentage> ]{1,4} [ / [ <length> | <percentage> ]{1,4} ]?" "border-right" "Formal syntax: <br-width> || <br-style> || <color>" "border-right-color" "Formal syntax: <color>" "border-right-width" "Formal syntax: <br-width>" "border-spacing" "Formal syntax: <length> <length>?" "border-right-style" "Formal syntax: <br-style>" "border-style" "Formal syntax: <br-style>{1,4}" "border-top-color" "Formal syntax: <color>" "border-top" "Formal syntax: <br-width> || <br-style> || <color>" "border-top-style" "Formal syntax: <br-style>" "border-top-left-radius" "Formal syntax: [ <length> | <percentage> ]{1,2}  " "border-top-right-radius" "Formal syntax: [ <length> | <percentage> ]{1,2}  " "border-top-width" "Formal syntax: <br-width>" "bottom" "Formal syntax: <length> | <percentage> | auto" "border-width" "Formal syntax: <br-width>{1,4}" "box-shadow" "Formal syntax: none | [inset? && [ <offset-x> <offset-y> <blur-radius>? <spread-radius>? <color>? ] ]#" "box-sizing" "Formal syntax: content-box | padding-box | border-box" "break-after" "Formal syntax: auto | always | avoid | left | right | page | column | avoid-page | avoid-colum" "break-before" "Formal syntax: auto | always | avoid | left | right | page | column | avoid-page | avoid-colum" "calc()" "calc(expression)" "caption-side" "Formal syntax: top | bottom" "@charset" "@charset charset;" "em" "" "rem" "" "vw" "" "vmin" "" "cm" "" "vmax" "" "<length>" "" "vh" "" "pc" "" "px" "" "ch" "" "ex" "" "mm" "" "pt" "" "in" "" "clear" "Formal syntax: none | left | right | both" "clip-path" "clip-path: <uri> | none | inherit" "clip" "Formal syntax: <shape> | auto" "columns" "Formal syntax: <'column-width'> || <'column-count'>" "color" "Formal syntax: <color>" "column-count" "Formal syntax: <number> | auto" "hsla()" "" "hsl()" "" "rgb()" "" "rgba()" "" "<color>" "" "column-fill" "Formal syntax: auto | balance" "column-gap" "Formal syntax: <length> | normal" "column-rule" "Formal syntax: <'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>" "column-rule-color" "Formal syntax: <color>" "column-rule-style" "Formal syntax: <br-style>" "column-rule-width" "Formal syntax: <br-width>" "column-span" "Formal syntax: none | all" "column-width" "Formal syntax: <length> | auto" "content" "Formal syntax: normal | none | [ <string> | <uri> | <counter> | attr() | open-quote | close-quote | no-open-quote | no-close-quote ]+" "counter-reset" "Formal syntax: [<user-ident> <integer>?]+ | none" "counter-increment" "Formal syntax: [<user-ident> <integer>?]+ | none" "steps()" "cubic-bezier(x1, y1, x2, y2)" "<timing-function>" "cubic-bezier(x1, y1, x2, y2)" "cubic-bezier()" "cubic-bezier(x1, y1, x2, y2)" "cursor" "Formal syntax: [ [ <uri> [<x> <y>]?,]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]" "direction" "Formal syntax: ltr | rtl" "display" "Formal syntax: none | inline | block | list-item | inline-block | inline-table | table | table-cell | table-column | table-column-group | table-footer-group | table-header-group | table-row | table-row-group | flex | inline-flex | grid | inline-grid | run-in" "@document" "The values provided to the url(), url-prefix(), and domain() functions can optionally be enclosed by single or double quotes. The values provided to the regexp() function must be enclosed in quotes." "empty-cells" "Formal syntax: show | hide" "element()" "element( id )" "dpi" "" "<resolution>" "" "dppx" "" "dpcm" "" "flex-direction" "Formal syntax: row | row-reverse | column | column-reverse" "flex" "Formal syntax: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]" "flex-basis" "Formal syntax: <'width'>" "flex-grow" "Formal syntax: <number>" "flex-flow" "Formal syntax: <'flex-direction'> || <'flex-wrap'>" "flex-shrink  " "Formal syntax: <number>" "flex-wrap" "Formal syntax: nowrap | wrap | wrap-reverse" "float" "Formal syntax: left | right | none" "font" "Formal syntax: [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]? <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ] | caption | icon | menu | message-box | small-caption | status-bar" "@font-face" "@font-face {
  [font-family: <family-name>;]?
  [src: [ <uri> [format(<string>#)]? | <font-face-name> ]#;]?
  [unicode-range: <urange>#;]?
  [font-variant: <font-variant>;]?
  [font-feature-settings: normal|<feature-tag-value>#;]?
  [font-stretch: <font-stretch>;]?
  [font-weight: <weight>];
  [font-style: <style>];
}" "font-family" "Formal syntax: [ <family-name> | <generic-family> ]# " "font-feature-settings" "Formal syntax: normal | <feature-tag-value>#" "font-size-adjust" "Formal syntax: none | <number>" "font-style" "Formal syntax: normal | italic | oblique" "font-size" "Formal syntax: <absolute-size> | <relative-size> | <length> | <percentage>" "font-stretch" "Formal syntax: normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded" "font-variant" "Formal syntax: normal | small-caps " "font-weight" "Formal syntax: normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900" "hz" "" "khz" "" "<frequency>" "" "<gradient>" "" "height" "Formal syntax: [<length> | <percentage>] && [border-box | content-box]? | available | min-content | max-content | fit-content | complex | auto" "image()" "" "hyphens" "Formal syntax: none | manual | auto" "image-rendering" "Formal syntax: auto | crisp-edges | pixelated" "@import" "@import url;                      or
@import url list-of-media-queries;" "image-orientation" "Formal syntax: from-image | <angle> | [<angle>? flip]" "<image>" "An <image> CSS data type represents may be one of the following:" "ime-mode" "Formal syntax: auto | normal | active | inactive | disabled" "inherit" "" "initial" "" "<integer>" "" "justify-content" "Formal syntax: flex-start | flex-end | center | space-between | space-around" "@keyframes" "@keyframes <identifier> {
  [ [ from | to | <percentage> ] [, from | to | <percentage> ]* block ]*
}" "left" "Formal syntax: <length> | <percentage> | auto" "letter-spacing" "Formal syntax: normal | <length>" "line-height" "Formal syntax: normal | <number> | <length> | <percentage>" "list-style" "Formal syntax: <'list-style-image'> || <'list-style-position'> || <'list-style-type'>" "linear-gradient()" "Formal grammar: linear-gradient(  [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )
                                  ---------------------------------/ ----------------------------/
                                    Definition of the gradient line         List of color stops  

                      where <side-or-corner> = [left | right] || [top | bottom]
                        and <color-stop>     = <color> [ <percentage> | <length> ]?" "list-style-image" "Formal syntax: <uri> | none" "list-style-position" "Formal syntax: inside | outside" "list-style-type" "Formal syntax: disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none" "margin-bottom" "Formal syntax: <length> | <percentage> | auto" "margin" "Formal syntax: [ <length> | <percentage> | auto ]{1,4}" "margin-right" "Formal syntax: <length> | <percentage> | auto" "margin-left" "Formal syntax: <length> | <percentage> | auto" "marks" "marks: [ crop || cross ] | none" "margin-top" "Formal syntax: <length> | <percentage> | auto" "mask" "mask: <uri> | none | inherit" "mask-type" "mask-type: luminance | alpha" "scalez()" "matrix(a, b, c, d, tx, ty)" "rotate3d()" "matrix(a, b, c, d, tx, ty)" "translate3d()" "matrix(a, b, c, d, tx, ty)" "skew()" "matrix(a, b, c, d, tx, ty)" "scale()" "matrix(a, b, c, d, tx, ty)" "skewy()" "matrix(a, b, c, d, tx, ty)" "translatey()" "matrix(a, b, c, d, tx, ty)" "rotatex()" "matrix(a, b, c, d, tx, ty)" "rotatey()" "matrix(a, b, c, d, tx, ty)" "translatez()" "matrix(a, b, c, d, tx, ty)" "skewx()" "matrix(a, b, c, d, tx, ty)" "matrix()" "matrix(a, b, c, d, tx, ty)" "rotatez()" "matrix(a, b, c, d, tx, ty)" "scale3d()" "matrix(a, b, c, d, tx, ty)" "rotate()" "matrix(a, b, c, d, tx, ty)" "translate()" "matrix(a, b, c, d, tx, ty)" "translatex()" "matrix(a, b, c, d, tx, ty)" "perspective()" "matrix(a, b, c, d, tx, ty)" "scaley()" "matrix(a, b, c, d, tx, ty)" "scalex()" "matrix(a, b, c, d, tx, ty)" "matrix3d()" "matrix(a, b, c, d, tx, ty)" "max-height" "Formal syntax: <length> | <percentage> | none | max-content | min-content | fit-content | fill-available" "@media" "@media <media types> {
  /* media-specific rules */
}" "max-width" "Formal syntax: <length> | <percentage> | none | max-content | min-content | fit-content | fill-available" "min-height" "Formal syntax: <length> | <percentage> | max-content | min-content | fit-content | fill-available" "ms" "" "s" "" "<time>" "" "min-width" "Formal syntax: <length> | <percentage> | max-content | min-content | fit-content | fill-available" "@namespace" "For a default namespace:" "none" "" "normal" "" "<number>" "" "orphans" "Formal syntax: <integer>" "opacity" "Formal syntax: <number>" "outline" "Formal syntax: <'outline-color'> || <'outline-width'> || <'outline-style'>" "outline-color" "Formal syntax: <color> | invert" "order" "Formal syntax: <integer>" "outline-width" "Formal syntax: <br-width>" "outline-style" "Formal syntax: <br-style>" "overflow-x" "Formal syntax: visible | hidden | scroll | auto" "overflow-y" "Formal syntax: visible | hidden | scroll | auto" "outline-offset" "Formal syntax: <length>" "padding" "Formal syntax: [ <length> | <percentage> ]{1,4}" "padding-bottom" "Formal syntax: <length> | <percentage>" "padding-left" "Formal syntax: <length> | <percentage>" "padding-right" "Formal syntax: <length> | <percentage>" "padding-top" "Formal syntax: <length> | <percentage>" "@page" "@page :pseudo-class {
  margin:2in;
}" "page-break-before" "Formal syntax: auto | always | avoid | left | right" "page-break-after" "Formal syntax: auto | always | avoid | left | right" "<percentage>" "" "page-break-inside" "Formal syntax: auto | avoid" "perspective" "Formal syntax: none | <length>" "perspective-origin" "Formal syntax: [ <percentage> | <length> | left | center | right | top | bottom] | [ [ <percentage> | <length> | left | center | right ] && [ <percentage> | <length> | top | center | bottom ] ]" "position" "Formal syntax: static | relative | absolute | sticky | fixed" "pointer-events" "pointer-events:  auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit" "<position>" "" "radial-gradient()" "Formal grammar: 
  radial-gradient( [[ circle               || <length> ]                     [ at <position> ]? , | 
                    [ ellipse              || [<length> | <percentage> ]{2}] [ at <position> ]? , |
                    [ [ circle | ellipse ] || <extent-keyword> ]             [ at <position> ]? , |
                                                                               at <position> ,     <color-stop> [ , <color-stop> ]+ )
                   ------------------------------------------------------------------------------/--------------------------------/
                                 Definition of the contour, size and position of the ending shape         List of color stops  
    
          where <extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side
            and <color-stop> = <color> [ <percentage> | <length> ]?" "quotes" "Formal syntax: [<string> <string>]+ | none" "<ratio>" "" "<shape>" "The rect() functional notation produces a region in the form of a rectangle." "rect()" "The rect() functional notation produces a region in the form of a rectangle." "repeating-linear-gradient()" "Formal grammar: repeating-linear-gradient(  [ <angle> | to <side-or-corner> ,]? <color-stop> [, <color-stop>]+ )
                                            ---------------------------------/ ----------------------------/
                                              Definition of the gradient line         List of color stops  

                              where <side-or-corner> = [left | right] || [top | bottom]
                                and <color-stop>     = <color> [ <percentage> | <length> ]?" "repeating-radial-gradient()" "Formal grammar: 
  repeating-radial-gradient( [[ circle               || <length> ]                     [ at <position> ]? , | 
                              [ ellipse              || [<length> | <percentage> ]{2}] [ at <position> ]? , |
                              [ [ circle | ellipse ] || <extent-keyword> ]             [ at <position> ]? , |
                                                                                         at <position> ,     <color-stop> [ , <color-stop> ]+ )
                            ------------------------------------------------------------------------------/--------------------------------/
                                 Definition of the contour, size and position of the ending shape                    List of color stops  
    
              where <extent-keyword> = closest-corner | closest-side | farthest-corner | farthest-side
                    and <color-stop> = <color> [ <percentage> | <length> ]?" "resize" "Formal syntax: none | both | horizontal | vertical" "right" "Formal syntax: <length> | <percentage> | auto" "@supports" "@supports <supports_condition> {
  /* specific rules */
}" "table-layout" "Formal syntax: auto | fixed" "<string>" "" "tab-size" "Formal syntax: <integer>" "text-align-last" "Formal syntax: auto | start | end | left | right | center | justify" "text-align" "Formal syntax: [ start | end | left | right | center ] || <string> ] | justify | match-parent | start end" "text-decoration" "Formal syntax: <'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'>" "text-decoration-line" "Formal syntax: none | [ underline || overline || line-through || blink ]" "text-decoration-color" "Formal syntax: <color>" "text-decoration-style" "Formal syntax: solid | double | dotted | dashed | wavy" "text-indent" "Formal syntax: <length> | <percentage> && [ hanging || each-line ]")))(provide 'css-eldoc-hash-table)
